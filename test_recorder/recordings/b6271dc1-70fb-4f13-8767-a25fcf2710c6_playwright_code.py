import asyncio
import re
from playwright.async_api import Playwright, async_playwright, expect


async def run(playwright: Playwright) -> None:
    browser = await playwright.chromium.launch(headless=False)
    context = await browser.new_context()
    page = await context.new_page()
    await page.goto("http://192.168.1.128/login")
    await page.get_by_role("button", name="登录").click()
    await page.goto("http://192.168.1.128/index")
    await page.get_by_role("navigation", name="新增菜单2").click()
    await page.get_by_role("navigation", name="系统工具").click()
    await page.get_by_role("link", name="表单构建").click()
    await page.get_by_role("navigation", name="系统监控").click()
    await page.get_by_role("link", name="定时任务").click()
    await page.goto("http://192.168.1.128/login")
    await page.get_by_role("button", name="登录").click()
    await page.goto("http://192.168.1.128/index")
    await page.get_by_role("navigation", name="系统管理").click()
    await page.get_by_role("link", name="角色管理").click()
    await page.get_by_role("link", name="新增").click()
    await page.get_by_role("link", name="关闭").click()
    await page.get_by_role("link", name="新增").click()
    await page.locator("#roleName").fill()
    await page.get_by_role("link", name="关闭").click()
    await page.locator("input[type="checkbox"]").check()
    await page.locator("input[type="checkbox"]").fill("on")
    await page.get_by_text("1").click()
    await page.get_by_text("1").click()
    await page.locator("input[type="checkbox"]").check()
    await page.locator("input[type="checkbox"]").fill("on")
    await page.locator("label").click()
    await page.locator("input[type="checkbox"]").check()
    await page.locator("input[type="checkbox"]").fill("on")
    await page.locator(".bs-checkbox").click()
    await page.locator("input[type="text"]").fill()
    await page.locator("input[type="text"]").fill("我是")
    await page.locator("input[type="text"]").fill("")
    await page.get_by_text("系统首页").click()
    await page.get_by_role("navigation", name="系统监控").click()
    await page.get_by_role("link", name="定时任务").click()
    await page.get_by_role("link", name="系统工具").click()
    await page.get_by_role("link", name="系统接口").click()
    await page.get_by_role("link", name="代码生成").click()
    await page.get_by_role("link", name="表单构建").click()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("textbox", name="文本框：").fill()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("textbox", name="这里是纯文字信息").fill()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()
    await page.get_by_role("combobox", name="选项 1 选项 2").select_option()

    # ---------------------
    await context.close()
    await browser.close()


async def main() -> None:
    async with async_playwright() as playwright:
        await run(playwright)


asyncio.run(main())